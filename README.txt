# This document explains all the scripts used for analyzing SMRT-Cappable-seq data 
# Programs are developed and maintained by Bo Yan (New England Biolabs). 
# All the scripts are developed based on Python 2.7.
# Modified on Feb 6, 2018

##################
#----. Introduction

There are two types of reads in the original fastq file generated by PacBio CSS protocol, see experimental design in the paper.
Type1:
ACACTCTGTCGCTACGTAGATAGCGTTGAGTG(adapterL)-polyC-RNA-polyA-GCGC-UID_RC-AGATCGGAAGAGCACACGTCTGAACTCCAGTCA(adapterR)
Type2:
TGACTGGAGTTCAGACGTGTGCTCTTCCGATCT(adapterR_RC)-UID-GCGC-polyT-RNA_RC-polyG-CACTCAACGCTATCTACGTAGCGACAGAGTGT(adapterL_RC)
UID (unique ID) is a 6 bp randomly generated sequence that could be used for identifying the duplicates, e.g.:CACGTA

## Pipeline for SMRT-Cappable-seq analysis:

PacBio movie -> 
CSS protocol to extract reads -> 
trim the adapter using pacbio_trim.py filter and trim the and polyA and ployC sequence using pacbio_trim.py poly ->
reads mapping using BlazR -clipping soft ->
count the number of reads using TSS_analysis.py count ->
compare with the control library to remove the false positive TSS ->
TSS clustering using TSS_analysis.py cluster, count the number of reads at clustered TSS using TSS_analysis.py count ->
TTS analysis using binomialtest.R ->
define and compare operon


##################
#----. pacbio_trim.py
Requirement: python regex module installed.

## Usage:
python pacbio_trim.py length --input input.fastq (default)
python pacbio_trim.py length --input input.fasta --fa

Description:
Use to analyze the length of reads in either fastq or fasta file. Automatically generate a length report (input.length.report) for plotting the length districution using histogram.

## Usage:
python pacbio_trim.py filer --input --output --filter

Description:
Use to remove the reads with RNA concatamers, which contains more than one adapterL; and convert all the reads into the same direction as the original RNA.
Here the adapterL sequence is 'ACACTCTGTCGCTACGTAGATAGCGTTGAGTG'. This sequence could be changed in the matching criteria based on the adapter used.

--input: is the original fastq file generated by PacBio RS_ReadsOfinsert.1 or CSS protocol.
    
--output: is a standard fasta file, which only contains the reads with one left-adapter, and the output reads have the same direction as the original RNA (type1 read).

Automatically it also generates a report file (output.concatemer.report) with the number of concatamers in each read, and this file could be used to analyze the reads containing concatamers using "sort|uniq -c"

output.concatemer.report, e.g.:
number of reads; number of adapterL
50854 0 (reads without adapterL detected)
304607 1 (good reads with only one adapterL detected)
 590 2 (concatamers with two adapterLs)
  44 3

--filter: is a fasta file, which saves the reads that are not retained (with 0 or >2 left-adapters). 

## Usage:
python pacbio_trim.py poly --input --output --filter

Description:
Use to remove 3'-polyA tail and 5'-polyC adapter sequences in the reads, also extract UID and add it into the ID line. The reads in the output file are used for mapping. This step also removes reads that do not have proper UID sequence.
See the following example for explaination.

--input: is the fasta file generated by the above filter function.

--output: is a fasta file, which contains the reads that the 3'-polyA tail and 5'-polyC adapter sequences are trimmed, and the UID is in the ID line
e.g, here 'CACGTA' is the UID for this read:
>m161210_015520_42139_c101138192530000001823255305311750_s1_p0/15/ccs/CACGTA
GGGATGCAAATCCGCACACAACATT..ATCAACGGGCAGGTCACTGACTTGCCCGTTTTTT 

--filter: is a fasta file, which saves the reads without proper UID.

##################
#----. adjust_3end.py
Requirement: bedtools installed

## Usage:
python adjust_3end.py --information file.txt

Description:
This function adjusts the 3'end for reads in the bed file after alignment, which removes the mapping due to the incomplete removal of the addition of polyA tail in the filter step.
Here all the input reads are mapped to only one bacterial genome.
See the following example for explaination.

--information: is a file containing all the information requried for this example. The file.txt is as following:
Input:/Users/yan/Documents/script/python_script/bioinformatics_function/pacbio_tool/Github/enrich_161020.bed
Output:enrich_161020.adjust.bed
Bedtools Path:/usr/local/bin/
Reference:/Users/yan/Documents/script/python_script/bioinformatics_function/pacbio_tool/reference/NC_000913.3/GCF_000005845.2_ASM584v2_genomic.fna


Note:
Input: Input file is the standard bed file converted from the bam file generated by blazR, e.g.:
NC_000913.3        142     303     m161210_082157_42139_c101138192530000001823255305311752_s1_p0/50236/ccs/TGAAAC/0_245    254     +
NC_000913.3        146     1544    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/132585/ccs/GGAAGA/0_1411  254     +
NC_000913.3        147     255     m161210_015520_42139_c101138192530000001823255305311750_s1_p0/104209/ccs/GGAAGA/0_218   254     +

Reference: is the reference file (with path) of the bacterial genome fasta file used for mapping

Bedtools Path: is the path for calling bedtools, e.g.: '/usr/local/bin/'

Output: output file is the bed file with mofied 3'end, add a mod3end tag in column5, e.g.
NC_000913.3        147     1102    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/91977/ccs/GGCCCC/0_965    mod3end +
NC_000913.3        147     254     m161210_015520_42139_c101138192530000001823255305311750_s1_p0/104209/ccs/GGAAGA/0_218   mod3end +


'''
This is an example explaining the trim of polyC and polyA, and the adjustment of the 3'end using adjust_3end.py.

# original read in fastq
@m161211_031859_42139_c101138192530000001823255305311755_s1_p0/56683/ccs    TTGTACACTCTGTCGCTACGTAGATAGCGTTGAGTGCCCCCCCCCCCCCCCCCCCTGGATGCGCGAAATTAATCGTTACAGGAAAAGCCAAAGCTGAATCGATTTTATGATTTGGTTCAATTCTTCCTTTAGCGGCATAATGTTTAATGACGTACGAAACGTCAGCGGTCAACACCCGCCAGCAATGGACTGTATTGCGCTCTTCGTGCGTCGCGTCTGTTAAAAACTGGCGCTAACAATACAGGCTAAAGTCGAACCGCCAGGCTAGACTTTAGTTCCACAACACTAAACCTATAAGTTGGGGAAATACAATGTTCCAGCAAGAAGTTACCATTACCGCTCCGAACGGTCTGCACACCCGCCCTGCTGCCCAGTTTGTAAAAGAAGCTAAGGGCTTCACTTCTGAAATTACTGTGACTTCCAACGGCAAAAGCGCCAGCGCGAAAAGCCTGTTTAAACTGCAGACTCTGGGCCTGACTCAAGGTACCGTTGTGACTATCTCCGCAGAAGGCGAAGACGAGCAGAAAGCGGTTGAACATCTGGTTAAACTGATGGCGGAACTCGAGTAATTTCCCGGGTTCTTTTAAAAATCAGTCACAAGTAAGGTAGGGTTATGATTTCAGGCATTTTAGCATCCCCGGGTATCGCTTTCGGTAAAGCTCTGCTTCTGAAAGAAGACGAAATTGTCATTGACCGGAAAAAAATTTCTGCCGACCAGGTTGATCAGGAAGTTGAACGTTTTCTGAGCGGTCGTGCCAAGGCATCAGCCCAGCTGGAAACGATCAAAACGAAAGCTGGTGAAACGTTCGGTGAAGAAAAAGAAGCCATCTTTGAAGGGCATATTATGCTGCTCGAAGATGAGGAGCTGGAGCAGGAAATCATAGCCCTGATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAGATCGGAAGAGCACACGTCTGAACTCCAGTCACAC

# original read in after trimming of polyC and polyA
>m161211_031859_42139_c101138192530000001823255305311755_s1_p0/56683/ccs/GGAAGA    TGGATGCGCGAAATTAATCGTTACAGGAAAAGCCAAAGCTGAATCGATTTTATGATTTGGTTCAATTCTTCCTTTAGCGGCATAATGTTTAATGACGTACGAAACGTCAGCGGTCAACACCCGCCAGCAATGGACTGTATTGCGCTCTTCGTGCGTCGCGTCTGTTAAAAACTGGCGCTAACAATACAGGCTAAAGTCGAACCGCCAGGCTAGACTTTAGTTCCACAACACTAAACCTATAAGTTGGGGAAATACAATGTTCCAGCAAGAAGTTACCATTACCGCTCCGAACGGTCTGCACACCCGCCCTGCTGCCCAGTTTGTAAAAGAAGCTAAGGGCTTCACTTCTGAAATTACTGTGACTTCCAACGGCAAAAGCGCCAGCGCGAAAAGCCTGTTTAAACTGCAGACTCTGGGCCTGACTCAAGGTACCGTTGTGACTATCTCCGCAGAAGGCGAAGACGAGCAGAAAGCGGTTGAACATCTGGTTAAACTGATGGCGGAACTCGAGTAATTTCCCGGGTTCTTTTAAAAATCAGTCACAAGTAAGGTAGGGTTATGATTTCAGGCATTTTAGCATCCCCGGGTATCGCTTTCGGTAAAGCTCTGCTTCTGAAAGAAGACGAAATTGTCATTGACCGGAAAAAAATTTCTGCCGACCAGGTTGATCAGGAAGTTGAACGTTTTCTGAGCGGTCGTGCCAAGGCATCAGCCCAGCTGGAAACGATCAAAACGAAAGCTGGTGAAACGTTCGGTGAAGAAAAAGAAGCCATCTTTGAAGGGCATATTATGCTGCTCGAAGATGAGGAGCTGGAGCAGGAAATCATAGCCCTGATT{AAA}AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
Note: 
The polyA tail is not completely removed due to the occurence of G in the middle. The {AAA} at the 3'end of the RNA sequence, which could be the remaining of the polyA tail, are mapped to the genome, therefore should be adjusted.

# in the mapped bam file
m161211_031859_42139_c101138192530000001823255305311755_s1_p0/56683/ccs/GGAAGA/0_893	0	gi|48994873|gb|U00096.2|	2531532	254	2S838M53S	*	0	83	TGGATGCGCGAAATTAATCGTTACAGGAAAAGCCAAAGCTGAATCGATTTTATGATTTGGTTCAATTCTTCCTTTAGCGGCATAATGTTTAATGACGTACGAAACGTCAGCGGTCAACACCCGCCAGCAATGGACTGTATTGCGCTCTTCGTGCGTCGCGTCTGTTAAAAACTGGCGCTAACAATACAGGCTAAAGTCGAACCGCCAGGCTAGACTTTAGTTCCACAACACTAAACCTATAAGTTGGGGAAATACAATGTTCCAGCAAGAAGTTACCATTACCGCTCCGAACGGTCTGCACACCCGCCCTGCTGCCCAGTTTGTAAAAGAAGCTAAGGGCTTCACTTCTGAAATTACTGTGACTTCCAACGGCAAAAGCGCCAGCGCGAAAAGCCTGTTTAAACTGCAGACTCTGGGCCTGACTCAAGGTACCGTTGTGACTATCTCCGCAGAAGGCGAAGACGAGCAGAAAGCGGTTGAACATCTGGTTAAACTGATGGCGGAACTCGAGTAATTTCCCGGGTTCTTTTAAAAATCAGTCACAAGTAAGGTAGGGTTATGATTTCAGGCATTTTAGCATCCCCGGGTATCGCTTTCGGTAAAGCTCTGCTTCTGAAAGAAGACGAAATTGTCATTGACCGGAAAAAAATTTCTGCCGACCAGGTTGATCAGGAAGTTGAACGTTTTCTGAGCGGTCGTGCCAAGGCATCAGCCCAGCTGGAAACGATCAAAACGAAAGCTGGTGAAACGTTCGGTGAAGAAAAAGAAGCCATCTTTGAAGGGCATATTATGCTGCTCGAAGATGAGGAGCTGGAGCAGGAAATCATAGCCCTGATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG	RG:Z:19d3f02ca9	AS:i:-4190	XS:i:1	XE:i:894	YS:i:0	YE:i:893	ZM:i:0	XL:i:838	XT:i:1	NM:i:0	FI:i:3	XQ:i:893

# bedtool bamtobed
gi|48994873|gb|U00096.2|	2531531	2532369	m161211_031859_42139_c101138192530000001823255305311755_s1_p0/56683/ccs/GGAAGA/0_893	254	+
# bedtools getfasta -s 
>gi|48994873|gb|U00096.2|:2531531-2532369(+)    GATGCGCGAAATTAATCGTTACAGGAAAAGCCAAAGCTGAATCGATTTTATGATTTGGTTCAATTCTTCCTTTAGCGGCATAATGTTTAATGACGTACGAAACGTCAGCGGTCAACACCCGCCAGCAATGGACTGTATTGCGCTCTTCGTGCGTCGCGTCTGTTAAAAACTGGCGCTAACAATACAGGCTAAAGTCGAACCGCCAGGCTAGACTTTAGTTCCACAACACTAAACCTATAAGTTGGGGAAATACAATGTTCCAGCAAGAAGTTACCATTACCGCTCCGAACGGTCTGCACACCCGCCCTGCTGCCCAGTTTGTAAAAGAAGCTAAGGGCTTCACTTCTGAAATTACTGTGACTTCCAACGGCAAAAGCGCCAGCGCGAAAAGCCTGTTTAAACTGCAGACTCTGGGCCTGACTCAAGGTACCGTTGTGACTATCTCCGCAGAAGGCGAAGACGAGCAGAAAGCGGTTGAACATCTGGTTAAACTGATGGCGGAACTCGAGTAATTTCCCGGGTTCTTTTAAAAATCAGTCACAAGTAAGGTAGGGTTATGATTTCAGGCATTTTAGCATCCCCGGGTATCGCTTTCGGTAAAGCTCTGCTTCTGAAAGAAGACGAAATTGTCATTGACCGGAAAAAAATTTCTGCCGACCAGGTTGATCAGGAAGTTGAACGTTTTCTGAGCGGTCGTGCCAAGGCATCAGCCCAGCTGGAAACGATCAAAACGAAAGCTGGTGAAACGTTCGGTGAAGAAAAAGAAGCCATCTTTGAAGGGCATATTATGCTGCTCGAAGATGAGGAGCTGGAGCAGGAAATCATAGCCCTGATT{AAA}

# Therefore, the adjusted 3'end should be:
gi|48994873|gb|U00096.2|	2531531	2532366	m161211_031859_42139_c101138192530000001823255305311755_s1_p0/56683/ccs/GGAAGA/0_893	254	+
'''


##################
#----. TSS_analysis.py
Requirement: python2.7
Modifications:
On April 5, 2019, modify cluster function to be applied to all the genomes. Originally only for E.coli NC_000913.3.

## Usage:
python TSS_analysis.py count --input input.bed --output count.output

Description:
This function counts the number of reads starting at the same 5'end and ending at the same 3'end. 
Currently this script is only designed to count the reads mapped to only one genome, 
in other words 'cut -f1 input.bed | sort -u | uniq -c' == 1

--input, input file is the standard bed6 file, which could be generated by bedtools bamtobed, e.g.:
*genome version, *read start, *read end, .(whatever), .(whatever), *strand
NC_000913.3     142     303     m161210_082157_42139_c101138192530000001823255305311752_s1_p0/50236/ccs/TGAAAC/0_245    254     +
NC_000913.3     146     1544    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/132585/ccs/GGAAGA/0_1411  254     +
NC_000913.3     146     3198    m161211_094717_42139_c101138192530000001823255305311756_s1_p0/70403/ccs/GGAAGA/0_3051   254     +
NC_000913.3     147     1105    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/55208/ccs/GGAAGA/0_960    254     +
NC_000913.3     147     236     m161210_015520_42139_c101138192530000001823255305311750_s1_p0/86647/ccs/ATCAAC/0_88     254     +
NC_000913.3     147     1102    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/91977/ccs/GGCCCC/0_965    mod3end +
..
NC_000913.3     5108    6481    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/146739/ccs/CTTGTG/0_1443  254     -
NC_000913.3     5210    6481    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/96812/ccs/GGAAGA/0_1280   254     -
NC_000913.3     5213    6481    m170119_085209_42139_c101145731270000001823270607071761_s1_p0/72917/ccs/CCACTT/0_1269   254     -
NC_000913.3     5216    6481    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/139749/ccs/CGATAT/0_1267  254     -
NC_000913.3     5267    6481    m161210_015520_42139_c101138192530000001823255305311750_s1_p0/58940/ccs/AGGGTA/0_1220   254     -
NC_000913.3     5334    6481    m170119_085209_42139_c101145731270000001823270607071761_s1_p0/143316/ccs/GGAAGA/0_1224  mod3end -
Note: * required information. For + strand, TSS is read start in col2; for - strand, TSS is read end in col3.

--output, output file is a bed8 file, e.g.:
genome version, end, start, end of the longest read with this TSS, . , strand; number of TSS, number of the same reads (same TSS and 3'end)
NC_000913.3        5563    6476    5563    .       -       1       1
NC_000913.3        5341    6478    5341    .       -       2       1
NC_000913.3        5423    6478    5341    .       -       2       1
NC_000913.3        5557    6480    5558    .       -       1       1
NC_000913.3        5453(end)    6481(TSS)    5108    .       -       64      1 # (1)
NC_000913.3        5560(end)    6481(TSS)    5108    .       -       64      2 # (2)
..
genome version, start, end, end of the longest read with this TSS, . , strand, number of TSS, number of the same reads (same TSS and 3'end)
NC_000913.3        142     303     303     .       +       1       1
NC_000913.3        146     1544    3198    .       +       2       1
NC_000913.3        146     3198    3198    .       +       2       1
NC_000913.3        147(TSS)     1140(end)    3970    .       +       50      1 
NC_000913.3        147(TSS)     1220(end)    3970    .       +       50      1 
NC_000913.3        147(TSS)     3970(end)    3970    .       +       50      1
Note: 
(1)There are 64 reads with TSS at 6481, and 1 read with TSS 6481 End 5453; for reads with TSS 6481, the longest read ends at 5108
(2)There are 64 reads with TSS at 6481, and 1 read withs TSS 6481 End 5560; for reads with TSS 6481, the longest read ends at 5108


By default, it also generates count.output.largest file, which saves only the longest reads for each TSS, e.g.:
genome version, start, end of longest read, max, . , strand, number of reads at TSS, number of the same reads (same TSS and 3'end)
NC_000913.3     5563    6476(TSS)    max     .       -       1       1
NC_000913.3     5341    6478    max     .       -       2       1
NC_000913.3     5557    6480    max     .       -       1       1
NC_000913.3     5108    6481    max     .       -       64      1
..
NC_000913.3        142     303     max     .       +       1       1
NC_000913.3        146     3198    max     .       +       2       1
NC_000913.3        147     3970    max     .       +       50      1


## Usage:
python TSS_analysis.py cluster --input count.output --output --control --cutoff (default5)

Description:

For n nearby TSSs [start at T1, T2 ..Tn], if abs(T2-T1)<=cutoff ... abs(Tn -Tn-1)<=cutoff, I define these n TSSs in the same cluster; 
so the distance between TSSs in the Cluster <=cutoff;
then I use the position Tx as the TSS for all the reads in this cluster, if Tx has the maiximal number of reads starting at this position;
output all the original reads with the modified TSS and the original 3'end;
So there are the same number of reads in the output file with modified TSS as in the original inputbed file before counting.
Then the number of reads with new TSS can be re-counted using the above count function. 

Currently this script is only designed to count the reads mapped to only one genome, 
in other words 'cut -f1 count.output | sort -u | uniq -c' == 1


--input, is the bed8 file generated by count function.

--output, output file is a bed6 file, e.g.
NC_000913.3     5563    6481    .       .       - # original read is 5563, 6476
NC_000913.3     5341    6481    .       .       - # original read is 5341, 6478
NC_000913.3     5423    6481    .       .       - # original read is 5423, 6478
NC_000913.3     5557    6481    .       .       - # original read is 5557, 6480
NC_000913.3     5108    6481    .       .       - # original read is 5108, 6481

--control, file generated which saves the orginal TSS before cluster, e.g.:
TSS used for the cluster; original TSSs in the cluster; strand
6481    6480;6478;6476;6481	-
21089   21089	-
21117   21113;21116;21117;21114;21118;21119;21120	-
Note: 
This means that the modified TSS6481 in the output file contains reads from original TSS6480,6478,6476,6481.

##################
#----. binomialtest.R

## Usage:
R binomialtest.R --no-save input.bed output.bed 0.2 < binomialtest.R

Description:
This function performs the binomial test to determine the signicant accumulation of reads at certain 3'ends, which is defined as termination site (TTS).
Use 95% condifential true for output.

Logic:
I define that a certain 3'end is a real TTS if it is binomial test significant (oneside 95% condifential) and there are more than 10 reads with the same TSS ending there.

binomial test hypothesis: 
For all the reads having the same TSS, there are more than prob(%) of reads ending at a certain position.
pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)

prob is the probability required as cutoff for reads ending at a certain position
Here I use min(percent, times*1/distance) for prob, using 0.2 means percent=20%
Since the size selection for sequencing is 1kb, I decide percent= times/1000, of course this can be changed; I determine to use percent=0.2 based on the ROC curve (y axis is the percent of previously known TTS/total TTS defined; x axis is the percent)
This means for reads with largest transcript shorter than 1kb, prob equals to percent (such as 20%), while for those longer than 1kb, prob equals to 200 times higher than the probability of random ending (1/distance)

q is the number of reads ending at a certain 3'end site
size is the number of reads havning the same TSS

input.bed is the bed8 file generated by TSS_analysis.py count, e.g.:
genome version, start, end, end of the longest read with this TSS, . , strand, number of TSS, number of the same reads (same TSS and 3'end)
NC_000913.3     5453    6481    5108    .       -       68      1
NC_000913.3     5560    6481    5108    .       -       68      2
NC_000913.3     5547    6481    5108    .       -       68      2

output.bed has the 3'ends at oneside 95% condifential, e.g.:
genome version, start, end, end of the longest read with this TSS, . , strand, number of TSS, number of the same reads (same TSS and 3'end), distance, pvalue, oneside95, oneside99
NC_000913.3     8190    9230    9721    .       +       108     35      1531    5.15930942412979e-08    1(Ture)       1(True)

##################
